syntax = "v1"

info(
	title: "tapi"
	desc: "接口"
	author: "tim"
	version: 1.0
)

import (
	"./api/routers.api"
	"./api/user.api"
	"./api/permission_resource.api"
	"./api/role_permission_resource.api"
)

type (
	// 错误
	CodeErrorResponse {
		Code int64  `json:"code"`
		Msg  string `json:"msg"`
	}

	// 登录请求
	LoginRequest {
		Name     string `form:"name"`
		Password string `form:"password"`
	}
	// 登录返回
	LoginResponse {
		Code  int64  `json:"code"`
		Msg   string `json:"msg"`
		Token string `json:"token,optional"`
	}

	// 退出请求
	LoginOutRequest {
	}
	// 退出返回
	LoginOutResponse {
		Code int64  `json:"code"`
		Msg  string `json:"msg"`
	}

	// 用户数据
	UserInfo {
		Id    int64  `json:"id"`
		Name  string `json:"name"`
		Ctime int64  `json:"ctime"`
		Utime int64  `json:"utime"`
	}

	// 修改密码请求
	EditPasswordRequest {
		Password string `json:"password"`
	}

	// 修改密码返回
	EditPasswordResponse {
		Code int64  `json:"code"`
		Msg  string `json:"msg"`
	}

	UserInfoRequest {
	}
	UserInfoResponse {
		Code int64    `json:"code"`
		Msg  string   `json:"msg"`
		Data UserInfo `json:"data,optional"`
	}

	UserSetRoleRequest {
		UserId int64 `form:"user_id"`
		RoleId int64 `form:"role_id"`
	}
	UserSetRoleResponse {
		Code int64  `json:"code"`
		Msg  string `json:"msg"`
	}
)

service Backend {
	// 登录
	@handler Login
	post /api/login(LoginRequest) returns (LoginResponse)
	
	// 退出
	@handler LoginOut
	post /api/loginout(LoginOutRequest) returns (LoginOutResponse)
}

@server(
	jwt: Auth // 开启auth验证
)
// 这部分只验证jwt
service Backend {
	// 用户信息
	@handler UserInfo
	post /api/user/info(UserInfoRequest) returns (UserInfoResponse)
	
	// 修改用户密码
	@handler EditPassword
	post /api/user/password(EditPasswordRequest) returns(EditPasswordResponse)
}

@server(
	jwt: Auth // 开启auth验证
	middleware: LoginMiddle
)
// 后面需要权限验证
service Backend {
	
	// 创建用户
	@handler UserAdd
	post /api/user/add(UserAddRequest) returns (UserAddResponse)
	
	// 删除用户
	@handler UserDel
	post /api/user/del(UserDelRequest) returns (UserDelResponse)
	
	// 查询用户列表
	@handler UserList
	post /api/user/list(UserListRequest) returns (UserListResponse)
	
	// 获取路由列表
	@handler RouterList
	get /api/router/list(RouterListResquest) returns (RouterListResponse)
	
	// 角色列表
	@handler RoleList
	get /api/role/list(RoleListRequest) returns (RoleListResponse)
	
	// 角色编辑
	@handler RoleEdit
	post /api/role/edit(RoleEditRequest) returns (RoleEditResponse)
	
	// 角色删除
	@handler RoleDelete
	post /api/role/delete(RoleDeleteRequest) returns (RoleDeleteResponse)
	
	// 权限资源列表
	@handler PermissionResourceList
	post /api/permission/resource/list(PermissionResourceListRequest) returns (PermissionResourceListResponse)
	
	// 权限资源列表
	@handler PermissionResourceEdit
	post /api/permission/resource/edit(PermissionResourceEditRequest) returns (PermissionResourceEditResponse)
	
	// 权限资源删除
	@handler PermissionResourceDelete
	post /api/permission/resource/delete(PermissionResourceDeleteRequest) returns (PermissionResourceDeleteResponse)
	
	// 角色资源列表
	@handler RolePermissionResourceList
	post /api/role/permission/resource/list(RolePermissionResourceListRequest) returns (RolePermissionResourceListResponse)
	
	// 角色分配资源
	@handler RolePermissionResourceEdit
	post /api/role/permission/resource/edit(RolePermissionResourceEditRequest) returns (RolePermissionResourceEditResponse)
	
	// 用户设置角色
	@handler UserSetRole
	post /api/user/set/role(UserSetRoleRequest) returns(UserSetRoleResponse)
}