// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"tapi/bkmodel/dao/model"
)

func newPermissionResource(db *gorm.DB, opts ...gen.DOOption) permissionResource {
	_permissionResource := permissionResource{}

	_permissionResource.permissionResourceDo.UseDB(db, opts...)
	_permissionResource.permissionResourceDo.UseModel(&model.PermissionResource{})

	tableName := _permissionResource.permissionResourceDo.TableName()
	_permissionResource.ALL = field.NewAsterisk(tableName)
	_permissionResource.ID = field.NewInt64(tableName, "id")
	_permissionResource.Name = field.NewString(tableName, "name")
	_permissionResource.URL = field.NewString(tableName, "url")
	_permissionResource.Status = field.NewInt32(tableName, "status")
	_permissionResource.Ctime = field.NewInt32(tableName, "ctime")
	_permissionResource.Utime = field.NewInt32(tableName, "utime")

	_permissionResource.fillFieldMap()

	return _permissionResource
}

type permissionResource struct {
	permissionResourceDo permissionResourceDo

	ALL    field.Asterisk
	ID     field.Int64  // 权限资源表主键
	Name   field.String // 资源名称
	URL    field.String // 资源url
	Status field.Int32  // 1.有效，2.无效
	Ctime  field.Int32  // 创建时间
	Utime  field.Int32  // 更新时间

	fieldMap map[string]field.Expr
}

func (p permissionResource) Table(newTableName string) *permissionResource {
	p.permissionResourceDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p permissionResource) As(alias string) *permissionResource {
	p.permissionResourceDo.DO = *(p.permissionResourceDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *permissionResource) updateTableName(table string) *permissionResource {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Name = field.NewString(table, "name")
	p.URL = field.NewString(table, "url")
	p.Status = field.NewInt32(table, "status")
	p.Ctime = field.NewInt32(table, "ctime")
	p.Utime = field.NewInt32(table, "utime")

	p.fillFieldMap()

	return p
}

func (p *permissionResource) WithContext(ctx context.Context) *permissionResourceDo {
	return p.permissionResourceDo.WithContext(ctx)
}

func (p permissionResource) TableName() string { return p.permissionResourceDo.TableName() }

func (p permissionResource) Alias() string { return p.permissionResourceDo.Alias() }

func (p *permissionResource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *permissionResource) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["url"] = p.URL
	p.fieldMap["status"] = p.Status
	p.fieldMap["ctime"] = p.Ctime
	p.fieldMap["utime"] = p.Utime
}

func (p permissionResource) clone(db *gorm.DB) permissionResource {
	p.permissionResourceDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p permissionResource) replaceDB(db *gorm.DB) permissionResource {
	p.permissionResourceDo.ReplaceDB(db)
	return p
}

type permissionResourceDo struct{ gen.DO }

func (p permissionResourceDo) Debug() *permissionResourceDo {
	return p.withDO(p.DO.Debug())
}

func (p permissionResourceDo) WithContext(ctx context.Context) *permissionResourceDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p permissionResourceDo) ReadDB() *permissionResourceDo {
	return p.Clauses(dbresolver.Read)
}

func (p permissionResourceDo) WriteDB() *permissionResourceDo {
	return p.Clauses(dbresolver.Write)
}

func (p permissionResourceDo) Session(config *gorm.Session) *permissionResourceDo {
	return p.withDO(p.DO.Session(config))
}

func (p permissionResourceDo) Clauses(conds ...clause.Expression) *permissionResourceDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p permissionResourceDo) Returning(value interface{}, columns ...string) *permissionResourceDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p permissionResourceDo) Not(conds ...gen.Condition) *permissionResourceDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p permissionResourceDo) Or(conds ...gen.Condition) *permissionResourceDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p permissionResourceDo) Select(conds ...field.Expr) *permissionResourceDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p permissionResourceDo) Where(conds ...gen.Condition) *permissionResourceDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p permissionResourceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *permissionResourceDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p permissionResourceDo) Order(conds ...field.Expr) *permissionResourceDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p permissionResourceDo) Distinct(cols ...field.Expr) *permissionResourceDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p permissionResourceDo) Omit(cols ...field.Expr) *permissionResourceDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p permissionResourceDo) Join(table schema.Tabler, on ...field.Expr) *permissionResourceDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p permissionResourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *permissionResourceDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p permissionResourceDo) RightJoin(table schema.Tabler, on ...field.Expr) *permissionResourceDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p permissionResourceDo) Group(cols ...field.Expr) *permissionResourceDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p permissionResourceDo) Having(conds ...gen.Condition) *permissionResourceDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p permissionResourceDo) Limit(limit int) *permissionResourceDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p permissionResourceDo) Offset(offset int) *permissionResourceDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p permissionResourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *permissionResourceDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p permissionResourceDo) Unscoped() *permissionResourceDo {
	return p.withDO(p.DO.Unscoped())
}

func (p permissionResourceDo) Create(values ...*model.PermissionResource) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p permissionResourceDo) CreateInBatches(values []*model.PermissionResource, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p permissionResourceDo) Save(values ...*model.PermissionResource) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p permissionResourceDo) First() (*model.PermissionResource, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionResource), nil
	}
}

func (p permissionResourceDo) Take() (*model.PermissionResource, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionResource), nil
	}
}

func (p permissionResourceDo) Last() (*model.PermissionResource, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionResource), nil
	}
}

func (p permissionResourceDo) Find() ([]*model.PermissionResource, error) {
	result, err := p.DO.Find()
	return result.([]*model.PermissionResource), err
}

func (p permissionResourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PermissionResource, err error) {
	buf := make([]*model.PermissionResource, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p permissionResourceDo) FindInBatches(result *[]*model.PermissionResource, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p permissionResourceDo) Attrs(attrs ...field.AssignExpr) *permissionResourceDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p permissionResourceDo) Assign(attrs ...field.AssignExpr) *permissionResourceDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p permissionResourceDo) Joins(fields ...field.RelationField) *permissionResourceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p permissionResourceDo) Preload(fields ...field.RelationField) *permissionResourceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p permissionResourceDo) FirstOrInit() (*model.PermissionResource, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionResource), nil
	}
}

func (p permissionResourceDo) FirstOrCreate() (*model.PermissionResource, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PermissionResource), nil
	}
}

func (p permissionResourceDo) FindByPage(offset int, limit int) (result []*model.PermissionResource, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p permissionResourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p permissionResourceDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p permissionResourceDo) Delete(models ...*model.PermissionResource) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *permissionResourceDo) withDO(do gen.Dao) *permissionResourceDo {
	p.DO = *do.(*gen.DO)
	return p
}
